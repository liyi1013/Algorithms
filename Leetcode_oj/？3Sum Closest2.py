class Solution:
    # @return an integer
    def fabs(self,a):
        if a<0:
            return -a
        else:
            return a

    def threeSumClosest(self, num, target):
        num.sort()
        num_items=len(num)
        output=0
        absdiff=self.fabs(target)+self.fabs(num[0])
        for i in range(num_items):
            other=self.twoSumClosest(num[0:i]+num[i+1:num_items],target-num[i],num_items-1)
            absd=self.fabs( target- num[i]-other )
            if absd<absdiff:
                absdiff=absd
                output=num[i]+other
            if target==output:
                break
        return output
        
    def twoSumClosest(self,num,target,num_items):
        output=0
        absdiff=self.fabs(target)
        for i in range(num_items):
            other=self.oneSumClosest(num[0:i]+num[i+1:num_items],target-num[i],num_items-1)
            if self.fabs( target- num[i]-other )<absdiff:
                absdiff=self.fabs( target- num[i]-other )
                output=num[i]+other
            if target==output:
                break
        return output
        
    def oneSumClosest(self,num,target,num_items):
        if target>=num[num_items-1]:
            return num[num_items-1]
        if target<=num[0]:
            return num[0]

        head=0
        end=num_items-1
        mid=(head+end)/2
        while (end-head)>1:
            if target>=num[mid]:
                head=mid
                mid=(head+end)/2
            else:
                end=mid
                mid=(head+end)/2
        if self.fabs(num[end]-target)-self.fabs(num[head]-target)>0:
            return num[head]
        else:
            return num[end]

if __name__ == '__main__':
    s=Solution()
    #print(s.threeSumClosest([0,0,0],1))
    #print(s.twoSumClosest([-1,0,1,2,3,4,5,6],5.4))
    #print(s.threeSumClosest([87,6,-100,-19,10,-8,-58,56,14,-1,-42,-45,-17,10,20,-4,13,-17,0,11,-44,65,74,-48,30,-91,13,-53,76,-69,-19,-69,16,78,-56,27,41,67,-79,-2,30,-13,-60,39,95,64,-12,45,-52,45,-44,73,97,100,-19,-16,-26,58,-61,53,70,1,-83,11,-35,-7,61,30,17,98,29,52,75,-73,-73,-23,-75,91,3,-57,91,50,42,74,-7,62,17,-91,55,94,-21,-36,73,19,-61,-82,73,1,-10,-40,11,54,-81,20,40,-29,96,89,57,10,-16,-34,-56,69,76,49,76,82,80,58,-47,12,17,77,-75,-24,11,-45,60,65,55,-89,49,-19,4], -275))
    print(s.threeSumClosest([-7,-71,-7,-13,45,46,-50,83,-29,-72,9,32,-74,81,68,92,-31,28,-46,-86,-70,31,-62,-20,-56,97,-41,21,81,17,-14,56,69,16,25,-38,65,-48,15,16,-25,68,-41,46,-56,-2,-3,82,8,19,-32,62,92,-56,-9,43,50,100,66,-45,41,-24,-4,83,-36,79,24,97,82,89,-56,-91,75,-64,-68,96,-55,-52,-58,-37,68,27,89,-40,-42,94,-92,-70,40,74,75,-15,54,-54,0,4,-39,93,88,-31,-26,93,8,-85,-62,89,-93,98,4,-58,8,5,-93,7,30,-75,63,41,62,-52,49,93,-11,87,7,52,5,-96,-56,43,-41,-75,-16,73,6,35,-32,62,-50,-57,-25,5,-32,94,-70,6,19,-12,63,-47,76,-57,41,-49,-33,-15,-81,55,88,67,-51,100,-19,-39,62,84,-100,78,-24,31,-32,-83,33,-25,86,9,-30,-40,52,64,-30,-17,19,-69,-89,-67,-79,-100,-53], 157))
    #print(s.threeSumClosest([-88,-92,-82,-36,-1,67,13,83,87,-37,42,88,32,-14,56,-60,87,39,13,-37,86,-24,34,56,-16,-56,-49,-45,78,-77,22,-44,-21,42,-56,-81,-15,73,-78,3,-19,85,69,15,-21,46,62,84,-71,-49,36,0,100,34,34,3,-62,-54,-50,-9,-28,-12,-78,-4,-87,-7,-48,-40,46,-91,-77,32,-80,-1,55,32,32,-38,-5,56,-61,-81,-2,-22,-27,61,-4,75,79,80,-53,-49,-22,93,62,52,-44,98,-85,62,-64,-48,-82,51,-65,-25,75,-1,-94,-56,9,43,-5,-100,-92,-68,16,22,4,90,36,86,-55,-73,-48,-69,36,-76,-18,-99,-69,-65,14,48,59,19,-18,72,93,53,6,-63,-99,16,46,-93,-13,-66,42,-78,-84,-63,-68,-6,-11,-32,-12,26,66,94,-90,-59,75,-62,-72,-85,68,-23,-80,28,-55,-41,-88,10,-42,-31,22,100,47,-47,32,40,-77,68,58,13,-56,-12,-54,-63,-59,-93,15,11,51,13,21,15,82,-19,11,-51,-20,-77,18,-36,65,58,53,-75,-59,53,74,-43,16], 166))
    #print(s.threeSumClosest([3,-74,21,43,-94,-83,2,-97,-28,83,76,-4,17,95,62,5,-55,73,94,18,-32,79,-40,-60,-42,-10,23,43,71,3,40,64,-53,36,-18,-66,-20,-52,18,-96,-86,-45,19,16,-91,-90,-61,-92,-22,-26,-48,-24,-68,-95,19,-13,-61,-46,-45,3,14,98,-44,-54,49,40,-37,97,-72,-58,13,-27,28,21,1,40,-49,56,25,25,56,36,-27,31,56,21,-59,-44,89,-25,88,-72,0,-95,70,65,-84,52,66,-76,-71,91,-12,82,-98,56,-3,87,-54,-62,0,-15,94,95,49,46,-34,-14,70,12,34,-18,95,74,-86,-71,-61,35,-19,-45,-33,20,61,45,-97,64,23,34,20,-31,8,23,21,-22,-20,41,92,52,63,-14,-52,22,94,-59,-97,-51,59,-7,98,52,63,-3,-21,38,85,75,31,79,-20,-70,27,54,60,-98,23,-7,-9,73,100,-80,63,87,17,-50,69,53,5,14,0,55,-94,41,5,99,-91,-55,65,-46,-39,-52,-82,35,-77,-85,-94,32,33,22], 256))
    #print(s.threeSumClosest([43,75,-90,47,-49,72,17,-31,-68,-22,-21,-30,65,88,-75,23,97,-61,53,87,-3,33,20,51,-79,43,80,-9,34,-89,-7,93,43,55,-94,29,-32,-49,25,72,-6,35,53,63,6,-62,-96,-83,-73,66,-11,96,-90,-27,78,-51,79,35,-63,85,-82,-15,100,-82,1,-4,-41,-21,11,12,12,72,-82,-22,37,47,-18,61,60,55,22,-6,26,-60,-42,-92,68,45,-1,-26,5,-56,-1,73,92,-55,-20,-43,-56,-15,7,52,35,-90,63,41,-55,-58,46,-84,-92,17,-66,-23,96,-19,-44,77,67,-47,-48,99,51,-25,19,0,-13,-88,-10,-67,14,7,89,-69,-83,86,-70,-66,-38,-50,66,0,-67,-91,-65,83,42,70,-6,52,-21,-86,-87,-44,8,49,-76,86,-3,87,-32,81,-58,37,-55,19,-26,66,-89,-70,-69,37,0,19,-65,38,7,3,1,-96,96,-65,-52,66,5,-3,-87,-16,-96,57,-74,91,46,-79,0,-69,55,49,-96,80,83,73,56,22,58,-44,-40,-45,95,99,-97,-22,-33,-92,-51,62,20,70,90], 284))